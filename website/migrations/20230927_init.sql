-- CUSTOMERS
create table if not exists public.customers(
  id uuid not null,
  created_at timestamp with time zone not null default now(),
  username text not null,
  constraint clients_pkey primary key (id),
  constraint customers_username_key unique (username),
  constraint customers_id_fkey foreign key (id) references users(id) on delete cascade
)
tablespace pg_default;

alter table public.customers enable row level security;

CREATE POLICY "Customers can access ther cart" ON public.cart_products
  FOR ALL
    USING (id_cart =(
      SELECT
        cart.id
      FROM
        cart
      WHERE (cart.customer_id = uid())));

-- CART
create table public.cart(
  id bigint generated by default as identity,
  created_at timestamp with time zone not null default now(),
  customer_id uuid null,
  constraint cart_pkey primary key (id),
  constraint cart_customer_id_fkey foreign key (customer_id) references customers(id) on delete cascade
)
tablespace pg_default;

create table public.cart_products(
  id bigint generated by default as identity,
  created_at timestamp with time zone not null default now(),
  id_cart bigint not null,
  id_product text not null,
  constraint cart_products_pkey primary key (id),
  constraint unique_products_per_cart unique (id_cart, id_product),
  constraint cart_products_id_cart_fkey foreign key (id_cart) references cart(id) on delete cascade
)
tablespace pg_default;

-- When new user is created, add a new customer
-- TODO: and a new cart for the customer
create function public.handle_new_user()
  returns trigger
  language plpgsql
  security definer
  set search_path = public
  as $$
begin
  insert into public.customers(id)
    values(new.id);
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users for each row
  execute procedure public.handle_new_user();

